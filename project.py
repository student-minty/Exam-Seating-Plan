# -*- coding: utf-8 -*-
"""project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QqgSWFNQeN9_Btq3DaIRcy-YezZluVFD
"""

print("hi")
from collections import deque

from google.colab import drive
drive.mount('/content/drive')

inp_1="/content/drive/MyDrive/proj/inp_1.xlsx"
inp_2="/content/drive/MyDrive/proj/inp_2.xlsx"
inp_3="/content/drive/MyDrive/proj/inp_3.xlsx"
inp_4="/content/drive/MyDrive/proj/inp_4.xlsx"

import pandas as pd
ip1=pd.read_excel(inp_1)
ip3=pd.read_excel(inp_3)
print(ip1.head())
ip3.head()
ip2=pd.read_excel(inp_2)
ip3.head()

course_roll_dict = ip1.groupby('course_code')['rollno'].apply(list).to_dict()
print((course_roll_dict))

def sparse(courses,course_roll_dict,ip3,buffer,date,shift):
  room_cap={}
  for idx,row in ip3.iterrows():
    room_cap[row['Room No.']]=row['Exam Capacity']
  df = pd.DataFrame(list(room_cap.items()), columns=['Room No.', 'Exam Capacity'])
  df['Is_LT'] = df['Room No.'].astype(str).str.startswith('LT')
  df['Floor'] = df.apply(lambda x: int(str(x['Room No.'])[0]) if not x['Is_LT'] else 999, axis=1)
  sorted_df = df.sort_values(by=['Is_LT', 'Floor', 'Exam Capacity'], ascending=[True, True, False])
  sorted_df = sorted_df.drop(columns=['Is_LT', 'Floor'])
  all_rooms = sorted_df['Room No.'].tolist()
  courses.sort(key=lambda x:len(course_roll_dict[x]),reverse=True)
  used_rooms={i: False for i in all_rooms}
  room_cap = {room: capacity - buffer for room, capacity in room_cap.items()}
  allocate=[]
  for i in range(len(courses)):
    c=courses[i]

    for r in all_rooms:
      cl=len(course_roll_dict[c])
      if(room_cap[r]==0):
        continue
      if(cl<=0):
        break
      rl=room_cap[r]
      if(used_rooms[r]):
        if(cl<=rl):
          allocate.append([date,shift,c,r,cl,course_roll_dict[c][:cl]])
          course_roll_dict[c]=[]
          room_cap[r]-=cl
        else:
          allocate.append([date,shift,c,r,rl,course_roll_dict[c][:rl]])
          course_roll_dict[c]=course_roll_dict[c][rl:]
          room_cap[r]-=rl
      else:
        rl=rl//2
        if(cl<=rl):
          allocate.append([date,shift,c,r,cl,course_roll_dict[c][:cl]])
          course_roll_dict[c]=[]
          room_cap[r]-=cl
        else:
          allocate.append([date,shift,c,r,rl,course_roll_dict[c][:rl]])
          course_roll_dict[c]=course_roll_dict[c][rl:]
          room_cap[r]-=rl
        used_rooms[r]=True
  vaccant=pd.read_excel(inp_3)
  room_cap = {room: capacity + buffer for room, capacity in room_cap.items()}
  vaccant['Vacant'] = vaccant['Room No.'].map(room_cap)
  return allocate,vaccant

def dense(courses,course_roll_dict,ip3,buffer,date,shift):
  room_cap={}
  for idx,row in ip3.iterrows():
    room_cap[row['Room No.']]=row['Exam Capacity']
  df = pd.DataFrame(list(room_cap.items()), columns=['Room No.', 'Exam Capacity'])
  df['Is_LT'] = df['Room No.'].astype(str).str.startswith('LT')
  df['Floor'] = df.apply(lambda x: int(str(x['Room No.'])[0]) if not x['Is_LT'] else 999, axis=1)
  sorted_df = df.sort_values(by=['Is_LT', 'Floor', 'Exam Capacity'], ascending=[True, True, False])
  sorted_df = sorted_df.drop(columns=['Is_LT', 'Floor'])
  all_rooms = sorted_df['Room No.'].tolist()
  courses.sort(key=lambda x:len(course_roll_dict[x]),reverse=True)
  used_rooms={i: False for i in all_rooms}
  room_cap = {room: capacity - buffer for room, capacity in room_cap.items()}
  allocate=[]
  for i in range(len(courses)):
    c=courses[i]

    for r in all_rooms:
      cl=len(course_roll_dict[c])
      if(room_cap[r]==0):
        continue
      if(len(course_roll_dict[c])<=0):
        break
      rl=room_cap[r]
      if(cl<=rl):
        allocate.append([date,shift,c,r,cl,course_roll_dict[c][:cl]])
        course_roll_dict[c]=[]
        room_cap[r]-=cl
      else:
        allocate.append([date,shift,c,r,rl,course_roll_dict[c][:rl]])
        course_roll_dict[c]=course_roll_dict[c][rl:]
        room_cap[r]-=rl
  vaccant=pd.read_excel(inp_3)
  room_cap = {room: capacity + buffer for room, capacity in room_cap.items()}
  vaccant['Vacant'] = vaccant['Room No.'].map(room_cap)
  return allocate,vaccant

def sparse_executer(ip2,buffer):
  final_alloc=[]
  final_vaccant={}
  for idx,row in ip2.iterrows():
    date=row['Date']
    date_str = date.strftime("%Y-%m-%d")
    if date_str not in final_vaccant:
      final_vaccant[date_str] = {}
    courses = [course.strip() for course in row['Morning'].split(';')]
    shift='Morning'
    allocate_m,vaccant_m=sparse(courses,course_roll_dict,ip3,buffer,date,shift)
    final_vaccant[date_str][shift]=vaccant_m
    if(row['Evening']=='NO EXAM'):
      allocate_e=[]
    else:
      courses = [course.strip() for course in row['Morning'].split(';')]
      shift='Evening'
      allocate_e,vaccant_e=sparse(courses,course_roll_dict,ip3,buffer,date,shift)
      final_vaccant[date_str][shift]=vaccant_e
    allocate=allocate_m+allocate_e
    final_alloc.extend(allocate)
  return final_alloc,final_vaccant
def dense_executer(ip2,buffer):
  final_alloc=[]
  final_vaccant={}
  for idx,row in ip2.iterrows():
    date=row['Date']
    date_str = date.strftime("%Y-%m-%d")
    if date_str not in final_vaccant:
      final_vaccant[date_str] = {}
    courses = [course.strip() for course in row['Morning'].split(';')]
    shift='Morning'
    allocate_m,vaccant_m=dense(courses,course_roll_dict,ip3,buffer,date,shift)
    final_vaccant[date_str][shift]=vaccant_m
    if(row['Evening']=='NO EXAM'):
      allocate_e=[]
    else:
      courses = [course.strip() for course in row['Morning'].split(';')]
      shift='Evening'
      allocate_e,vaccant_e=dense(courses,course_roll_dict,ip3,buffer,date,shift)
      final_vaccant[date_str][shift]=vaccant_e
    allocate=allocate_m+allocate_e
    final_alloc.extend(allocate)
  return final_alloc

final_alloc=[]
final_vaccant={}
buffer=input("Enter buffer value: ")
buffer=int(buffer)
s_or_d=input("enter 1 for sparse 0 for dense :")
s_or_d=bool(s_or_d)
op_1_loc="/content/drive/MyDrive/proj/op_1.xlsx"
op_2_loc="/content/drive/MyDrive/proj/op_2.xlsx"

if(s_or_d):
  final_alloc,final_vaccant=sparse_executer(ip2,buffer)
else:
  final_alloc,final_vaccant=dense_executer(ip2,buffer)

allocation_df = pd.DataFrame(final_alloc, columns=[
        "Date", "Day", "course_code", "Room", "Allocated_students_count", "Roll_list"
    ])
allocation_df['Roll_list'] = allocation_df['Roll_list'].apply(lambda x: ';'.join(x))
allocation_df.to_excel(op_1_loc, index=False)
print(final_vaccant)
output_path = op_2_loc
rows = []
for date, shifts in final_vaccant.items():
    for shift, df in shifts.items():
            # Add 'Date' and 'Shift' columns to each DataFrame row
        df['Date'] = date
        df['Shift'] = shift
        rows.append(df)

    # Concatenate all rows into a single DataFrame
result_df = pd.concat(rows, ignore_index=True)

    # Reorder columns if necessary
result_df = result_df[['Date', 'Shift'] + [col for col in result_df.columns if col not in ['Date', 'Shift']]]

    # Save to CSV
result_df.to_csv(output_path, index=False)
print(f"CSV file saved to {output_path}")
